Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> scene
Rule 1     scene -> draws_instruction
Rule 2     draws_instruction -> draws_instruction shape
Rule 3     draws_instruction -> draws_instruction draw
Rule 4     draws_instruction -> shape
Rule 5     draws_instruction -> draw
Rule 6     draw -> DRAW ID INT COMMA INT
Rule 7     draw -> DRAW ID
Rule 8     draw -> DRAW NILL
Rule 9     shape -> SHAPE ID O_KEY pencil rules_locals axiom C_KEY
Rule 10    pencil -> PENCIL ID
Rule 11    pencil -> <empty>
Rule 12    rules_locals -> rules
Rule 13    rules_locals -> <empty>
Rule 14    rules -> rule rules
Rule 15    rules -> rule
Rule 16    rule -> RULE ID O_KEY base instructions loop C_KEY
Rule 17    base -> BASE TWO_POINT instruction_base
Rule 18    base -> BASE O_KEY instructions_base C_KEY
Rule 19    instructions_base -> instruction_base instructions_base
Rule 20    instructions_base -> instruction_base
Rule 21    instruction_base -> LEFT INT
Rule 22    instruction_base -> RIGHT INT
Rule 23    instruction_base -> LINE INT
Rule 24    instruction_base -> JUMP INT COMMA INT
Rule 25    instruction_base -> NILL
Rule 26    instruction_base -> PUSH INT COMMA INT
Rule 27    instruction_base -> POP
Rule 28    instruction_base -> CALL_SHAPE ID
Rule 29    instructions -> instruction instructions
Rule 30    instructions -> instruction
Rule 31    instruction -> instruction_base
Rule 32    instruction -> CALL_RULE ID
Rule 33    loop -> ITER INT
Rule 34    loop -> <empty>
Rule 35    axiom -> AXIOM O_KEY instructions_axiom C_KEY
Rule 36    instructions_axiom -> instruction_axiom instructions_axiom
Rule 37    instructions_axiom -> instruction_axiom
Rule 38    instruction_axiom -> instruction_base
Rule 39    instruction_axiom -> CALL_RULE ID O_PAR INT C_PAR

Terminals, with rules where they appear

AXIOM                : 35
BASE                 : 17 18
CALL_RULE            : 32 39
CALL_SHAPE           : 28
COMMA                : 6 24 26
C_KEY                : 9 16 18 35
C_PAR                : 39
DRAW                 : 6 7 8
ID                   : 6 7 9 10 16 28 32 39
INT                  : 6 6 21 22 23 24 24 26 26 33 39
ITER                 : 33
JUMP                 : 24
LEFT                 : 21
LINE                 : 23
NILL                 : 8 25
O_KEY                : 9 16 18 35
O_PAR                : 39
PENCIL               : 10
POP                  : 27
PUSH                 : 26
RIGHT                : 22
RULE                 : 16
SHAPE                : 9
TWO_POINT            : 17
error                : 

Nonterminals, with rules where they appear

axiom                : 9
base                 : 16
draw                 : 3 5
draws_instruction    : 1 2 3
instruction          : 29 30
instruction_axiom    : 36 37
instruction_base     : 17 19 20 31 38
instructions         : 16 29
instructions_axiom   : 35 36
instructions_base    : 18 19
loop                 : 16
pencil               : 9
rule                 : 14 15
rules                : 12 14
rules_locals         : 9
scene                : 0
shape                : 2 4

Parsing method: LALR

state 0

    (0) S' -> . scene
    (1) scene -> . draws_instruction
    (2) draws_instruction -> . draws_instruction shape
    (3) draws_instruction -> . draws_instruction draw
    (4) draws_instruction -> . shape
    (5) draws_instruction -> . draw
    (9) shape -> . SHAPE ID O_KEY pencil rules_locals axiom C_KEY
    (6) draw -> . DRAW ID INT COMMA INT
    (7) draw -> . DRAW ID
    (8) draw -> . DRAW NILL

    SHAPE           shift and go to state 5
    DRAW            shift and go to state 6

    scene                          shift and go to state 1
    draws_instruction              shift and go to state 2
    shape                          shift and go to state 3
    draw                           shift and go to state 4

state 1

    (0) S' -> scene .



state 2

    (1) scene -> draws_instruction .
    (2) draws_instruction -> draws_instruction . shape
    (3) draws_instruction -> draws_instruction . draw
    (9) shape -> . SHAPE ID O_KEY pencil rules_locals axiom C_KEY
    (6) draw -> . DRAW ID INT COMMA INT
    (7) draw -> . DRAW ID
    (8) draw -> . DRAW NILL

    $end            reduce using rule 1 (scene -> draws_instruction .)
    SHAPE           shift and go to state 5
    DRAW            shift and go to state 6

    shape                          shift and go to state 7
    draw                           shift and go to state 8

state 3

    (4) draws_instruction -> shape .

    SHAPE           reduce using rule 4 (draws_instruction -> shape .)
    DRAW            reduce using rule 4 (draws_instruction -> shape .)
    $end            reduce using rule 4 (draws_instruction -> shape .)


state 4

    (5) draws_instruction -> draw .

    SHAPE           reduce using rule 5 (draws_instruction -> draw .)
    DRAW            reduce using rule 5 (draws_instruction -> draw .)
    $end            reduce using rule 5 (draws_instruction -> draw .)


state 5

    (9) shape -> SHAPE . ID O_KEY pencil rules_locals axiom C_KEY

    ID              shift and go to state 9


state 6

    (6) draw -> DRAW . ID INT COMMA INT
    (7) draw -> DRAW . ID
    (8) draw -> DRAW . NILL

    ID              shift and go to state 10
    NILL            shift and go to state 11


state 7

    (2) draws_instruction -> draws_instruction shape .

    SHAPE           reduce using rule 2 (draws_instruction -> draws_instruction shape .)
    DRAW            reduce using rule 2 (draws_instruction -> draws_instruction shape .)
    $end            reduce using rule 2 (draws_instruction -> draws_instruction shape .)


state 8

    (3) draws_instruction -> draws_instruction draw .

    SHAPE           reduce using rule 3 (draws_instruction -> draws_instruction draw .)
    DRAW            reduce using rule 3 (draws_instruction -> draws_instruction draw .)
    $end            reduce using rule 3 (draws_instruction -> draws_instruction draw .)


state 9

    (9) shape -> SHAPE ID . O_KEY pencil rules_locals axiom C_KEY

    O_KEY           shift and go to state 12


state 10

    (6) draw -> DRAW ID . INT COMMA INT
    (7) draw -> DRAW ID .

    INT             shift and go to state 13
    SHAPE           reduce using rule 7 (draw -> DRAW ID .)
    DRAW            reduce using rule 7 (draw -> DRAW ID .)
    $end            reduce using rule 7 (draw -> DRAW ID .)


state 11

    (8) draw -> DRAW NILL .

    SHAPE           reduce using rule 8 (draw -> DRAW NILL .)
    DRAW            reduce using rule 8 (draw -> DRAW NILL .)
    $end            reduce using rule 8 (draw -> DRAW NILL .)


state 12

    (9) shape -> SHAPE ID O_KEY . pencil rules_locals axiom C_KEY
    (10) pencil -> . PENCIL ID
    (11) pencil -> .

    PENCIL          shift and go to state 15
    RULE            reduce using rule 11 (pencil -> .)
    AXIOM           reduce using rule 11 (pencil -> .)

    pencil                         shift and go to state 14

state 13

    (6) draw -> DRAW ID INT . COMMA INT

    COMMA           shift and go to state 16


state 14

    (9) shape -> SHAPE ID O_KEY pencil . rules_locals axiom C_KEY
    (12) rules_locals -> . rules
    (13) rules_locals -> .
    (14) rules -> . rule rules
    (15) rules -> . rule
    (16) rule -> . RULE ID O_KEY base instructions loop C_KEY

    AXIOM           reduce using rule 13 (rules_locals -> .)
    RULE            shift and go to state 20

    rules_locals                   shift and go to state 17
    rules                          shift and go to state 18
    rule                           shift and go to state 19

state 15

    (10) pencil -> PENCIL . ID

    ID              shift and go to state 21


state 16

    (6) draw -> DRAW ID INT COMMA . INT

    INT             shift and go to state 22


state 17

    (9) shape -> SHAPE ID O_KEY pencil rules_locals . axiom C_KEY
    (35) axiom -> . AXIOM O_KEY instructions_axiom C_KEY

    AXIOM           shift and go to state 24

    axiom                          shift and go to state 23

state 18

    (12) rules_locals -> rules .

    AXIOM           reduce using rule 12 (rules_locals -> rules .)


state 19

    (14) rules -> rule . rules
    (15) rules -> rule .
    (14) rules -> . rule rules
    (15) rules -> . rule
    (16) rule -> . RULE ID O_KEY base instructions loop C_KEY

    AXIOM           reduce using rule 15 (rules -> rule .)
    RULE            shift and go to state 20

    rule                           shift and go to state 19
    rules                          shift and go to state 25

state 20

    (16) rule -> RULE . ID O_KEY base instructions loop C_KEY

    ID              shift and go to state 26


state 21

    (10) pencil -> PENCIL ID .

    RULE            reduce using rule 10 (pencil -> PENCIL ID .)
    AXIOM           reduce using rule 10 (pencil -> PENCIL ID .)


state 22

    (6) draw -> DRAW ID INT COMMA INT .

    SHAPE           reduce using rule 6 (draw -> DRAW ID INT COMMA INT .)
    DRAW            reduce using rule 6 (draw -> DRAW ID INT COMMA INT .)
    $end            reduce using rule 6 (draw -> DRAW ID INT COMMA INT .)


state 23

    (9) shape -> SHAPE ID O_KEY pencil rules_locals axiom . C_KEY

    C_KEY           shift and go to state 27


state 24

    (35) axiom -> AXIOM . O_KEY instructions_axiom C_KEY

    O_KEY           shift and go to state 28


state 25

    (14) rules -> rule rules .

    AXIOM           reduce using rule 14 (rules -> rule rules .)


state 26

    (16) rule -> RULE ID . O_KEY base instructions loop C_KEY

    O_KEY           shift and go to state 29


state 27

    (9) shape -> SHAPE ID O_KEY pencil rules_locals axiom C_KEY .

    SHAPE           reduce using rule 9 (shape -> SHAPE ID O_KEY pencil rules_locals axiom C_KEY .)
    DRAW            reduce using rule 9 (shape -> SHAPE ID O_KEY pencil rules_locals axiom C_KEY .)
    $end            reduce using rule 9 (shape -> SHAPE ID O_KEY pencil rules_locals axiom C_KEY .)


state 28

    (35) axiom -> AXIOM O_KEY . instructions_axiom C_KEY
    (36) instructions_axiom -> . instruction_axiom instructions_axiom
    (37) instructions_axiom -> . instruction_axiom
    (38) instruction_axiom -> . instruction_base
    (39) instruction_axiom -> . CALL_RULE ID O_PAR INT C_PAR
    (21) instruction_base -> . LEFT INT
    (22) instruction_base -> . RIGHT INT
    (23) instruction_base -> . LINE INT
    (24) instruction_base -> . JUMP INT COMMA INT
    (25) instruction_base -> . NILL
    (26) instruction_base -> . PUSH INT COMMA INT
    (27) instruction_base -> . POP
    (28) instruction_base -> . CALL_SHAPE ID

    CALL_RULE       shift and go to state 33
    LEFT            shift and go to state 34
    RIGHT           shift and go to state 35
    LINE            shift and go to state 36
    JUMP            shift and go to state 37
    NILL            shift and go to state 38
    PUSH            shift and go to state 39
    POP             shift and go to state 40
    CALL_SHAPE      shift and go to state 41

    instructions_axiom             shift and go to state 30
    instruction_axiom              shift and go to state 31
    instruction_base               shift and go to state 32

state 29

    (16) rule -> RULE ID O_KEY . base instructions loop C_KEY
    (17) base -> . BASE TWO_POINT instruction_base
    (18) base -> . BASE O_KEY instructions_base C_KEY

    BASE            shift and go to state 43

    base                           shift and go to state 42

state 30

    (35) axiom -> AXIOM O_KEY instructions_axiom . C_KEY

    C_KEY           shift and go to state 44


state 31

    (36) instructions_axiom -> instruction_axiom . instructions_axiom
    (37) instructions_axiom -> instruction_axiom .
    (36) instructions_axiom -> . instruction_axiom instructions_axiom
    (37) instructions_axiom -> . instruction_axiom
    (38) instruction_axiom -> . instruction_base
    (39) instruction_axiom -> . CALL_RULE ID O_PAR INT C_PAR
    (21) instruction_base -> . LEFT INT
    (22) instruction_base -> . RIGHT INT
    (23) instruction_base -> . LINE INT
    (24) instruction_base -> . JUMP INT COMMA INT
    (25) instruction_base -> . NILL
    (26) instruction_base -> . PUSH INT COMMA INT
    (27) instruction_base -> . POP
    (28) instruction_base -> . CALL_SHAPE ID

    C_KEY           reduce using rule 37 (instructions_axiom -> instruction_axiom .)
    CALL_RULE       shift and go to state 33
    LEFT            shift and go to state 34
    RIGHT           shift and go to state 35
    LINE            shift and go to state 36
    JUMP            shift and go to state 37
    NILL            shift and go to state 38
    PUSH            shift and go to state 39
    POP             shift and go to state 40
    CALL_SHAPE      shift and go to state 41

    instruction_axiom              shift and go to state 31
    instructions_axiom             shift and go to state 45
    instruction_base               shift and go to state 32

state 32

    (38) instruction_axiom -> instruction_base .

    CALL_RULE       reduce using rule 38 (instruction_axiom -> instruction_base .)
    LEFT            reduce using rule 38 (instruction_axiom -> instruction_base .)
    RIGHT           reduce using rule 38 (instruction_axiom -> instruction_base .)
    LINE            reduce using rule 38 (instruction_axiom -> instruction_base .)
    JUMP            reduce using rule 38 (instruction_axiom -> instruction_base .)
    NILL            reduce using rule 38 (instruction_axiom -> instruction_base .)
    PUSH            reduce using rule 38 (instruction_axiom -> instruction_base .)
    POP             reduce using rule 38 (instruction_axiom -> instruction_base .)
    CALL_SHAPE      reduce using rule 38 (instruction_axiom -> instruction_base .)
    C_KEY           reduce using rule 38 (instruction_axiom -> instruction_base .)


state 33

    (39) instruction_axiom -> CALL_RULE . ID O_PAR INT C_PAR

    ID              shift and go to state 46


state 34

    (21) instruction_base -> LEFT . INT

    INT             shift and go to state 47


state 35

    (22) instruction_base -> RIGHT . INT

    INT             shift and go to state 48


state 36

    (23) instruction_base -> LINE . INT

    INT             shift and go to state 49


state 37

    (24) instruction_base -> JUMP . INT COMMA INT

    INT             shift and go to state 50


state 38

    (25) instruction_base -> NILL .

    CALL_RULE       reduce using rule 25 (instruction_base -> NILL .)
    LEFT            reduce using rule 25 (instruction_base -> NILL .)
    RIGHT           reduce using rule 25 (instruction_base -> NILL .)
    LINE            reduce using rule 25 (instruction_base -> NILL .)
    JUMP            reduce using rule 25 (instruction_base -> NILL .)
    NILL            reduce using rule 25 (instruction_base -> NILL .)
    PUSH            reduce using rule 25 (instruction_base -> NILL .)
    POP             reduce using rule 25 (instruction_base -> NILL .)
    CALL_SHAPE      reduce using rule 25 (instruction_base -> NILL .)
    C_KEY           reduce using rule 25 (instruction_base -> NILL .)
    ITER            reduce using rule 25 (instruction_base -> NILL .)


state 39

    (26) instruction_base -> PUSH . INT COMMA INT

    INT             shift and go to state 51


state 40

    (27) instruction_base -> POP .

    CALL_RULE       reduce using rule 27 (instruction_base -> POP .)
    LEFT            reduce using rule 27 (instruction_base -> POP .)
    RIGHT           reduce using rule 27 (instruction_base -> POP .)
    LINE            reduce using rule 27 (instruction_base -> POP .)
    JUMP            reduce using rule 27 (instruction_base -> POP .)
    NILL            reduce using rule 27 (instruction_base -> POP .)
    PUSH            reduce using rule 27 (instruction_base -> POP .)
    POP             reduce using rule 27 (instruction_base -> POP .)
    CALL_SHAPE      reduce using rule 27 (instruction_base -> POP .)
    C_KEY           reduce using rule 27 (instruction_base -> POP .)
    ITER            reduce using rule 27 (instruction_base -> POP .)


state 41

    (28) instruction_base -> CALL_SHAPE . ID

    ID              shift and go to state 52


state 42

    (16) rule -> RULE ID O_KEY base . instructions loop C_KEY
    (29) instructions -> . instruction instructions
    (30) instructions -> . instruction
    (31) instruction -> . instruction_base
    (32) instruction -> . CALL_RULE ID
    (21) instruction_base -> . LEFT INT
    (22) instruction_base -> . RIGHT INT
    (23) instruction_base -> . LINE INT
    (24) instruction_base -> . JUMP INT COMMA INT
    (25) instruction_base -> . NILL
    (26) instruction_base -> . PUSH INT COMMA INT
    (27) instruction_base -> . POP
    (28) instruction_base -> . CALL_SHAPE ID

    CALL_RULE       shift and go to state 56
    LEFT            shift and go to state 34
    RIGHT           shift and go to state 35
    LINE            shift and go to state 36
    JUMP            shift and go to state 37
    NILL            shift and go to state 38
    PUSH            shift and go to state 39
    POP             shift and go to state 40
    CALL_SHAPE      shift and go to state 41

    instructions                   shift and go to state 53
    instruction                    shift and go to state 54
    instruction_base               shift and go to state 55

state 43

    (17) base -> BASE . TWO_POINT instruction_base
    (18) base -> BASE . O_KEY instructions_base C_KEY

    TWO_POINT       shift and go to state 57
    O_KEY           shift and go to state 58


state 44

    (35) axiom -> AXIOM O_KEY instructions_axiom C_KEY .

    C_KEY           reduce using rule 35 (axiom -> AXIOM O_KEY instructions_axiom C_KEY .)


state 45

    (36) instructions_axiom -> instruction_axiom instructions_axiom .

    C_KEY           reduce using rule 36 (instructions_axiom -> instruction_axiom instructions_axiom .)


state 46

    (39) instruction_axiom -> CALL_RULE ID . O_PAR INT C_PAR

    O_PAR           shift and go to state 59


state 47

    (21) instruction_base -> LEFT INT .

    CALL_RULE       reduce using rule 21 (instruction_base -> LEFT INT .)
    LEFT            reduce using rule 21 (instruction_base -> LEFT INT .)
    RIGHT           reduce using rule 21 (instruction_base -> LEFT INT .)
    LINE            reduce using rule 21 (instruction_base -> LEFT INT .)
    JUMP            reduce using rule 21 (instruction_base -> LEFT INT .)
    NILL            reduce using rule 21 (instruction_base -> LEFT INT .)
    PUSH            reduce using rule 21 (instruction_base -> LEFT INT .)
    POP             reduce using rule 21 (instruction_base -> LEFT INT .)
    CALL_SHAPE      reduce using rule 21 (instruction_base -> LEFT INT .)
    C_KEY           reduce using rule 21 (instruction_base -> LEFT INT .)
    ITER            reduce using rule 21 (instruction_base -> LEFT INT .)


state 48

    (22) instruction_base -> RIGHT INT .

    CALL_RULE       reduce using rule 22 (instruction_base -> RIGHT INT .)
    LEFT            reduce using rule 22 (instruction_base -> RIGHT INT .)
    RIGHT           reduce using rule 22 (instruction_base -> RIGHT INT .)
    LINE            reduce using rule 22 (instruction_base -> RIGHT INT .)
    JUMP            reduce using rule 22 (instruction_base -> RIGHT INT .)
    NILL            reduce using rule 22 (instruction_base -> RIGHT INT .)
    PUSH            reduce using rule 22 (instruction_base -> RIGHT INT .)
    POP             reduce using rule 22 (instruction_base -> RIGHT INT .)
    CALL_SHAPE      reduce using rule 22 (instruction_base -> RIGHT INT .)
    C_KEY           reduce using rule 22 (instruction_base -> RIGHT INT .)
    ITER            reduce using rule 22 (instruction_base -> RIGHT INT .)


state 49

    (23) instruction_base -> LINE INT .

    CALL_RULE       reduce using rule 23 (instruction_base -> LINE INT .)
    LEFT            reduce using rule 23 (instruction_base -> LINE INT .)
    RIGHT           reduce using rule 23 (instruction_base -> LINE INT .)
    LINE            reduce using rule 23 (instruction_base -> LINE INT .)
    JUMP            reduce using rule 23 (instruction_base -> LINE INT .)
    NILL            reduce using rule 23 (instruction_base -> LINE INT .)
    PUSH            reduce using rule 23 (instruction_base -> LINE INT .)
    POP             reduce using rule 23 (instruction_base -> LINE INT .)
    CALL_SHAPE      reduce using rule 23 (instruction_base -> LINE INT .)
    C_KEY           reduce using rule 23 (instruction_base -> LINE INT .)
    ITER            reduce using rule 23 (instruction_base -> LINE INT .)


state 50

    (24) instruction_base -> JUMP INT . COMMA INT

    COMMA           shift and go to state 60


state 51

    (26) instruction_base -> PUSH INT . COMMA INT

    COMMA           shift and go to state 61


state 52

    (28) instruction_base -> CALL_SHAPE ID .

    CALL_RULE       reduce using rule 28 (instruction_base -> CALL_SHAPE ID .)
    LEFT            reduce using rule 28 (instruction_base -> CALL_SHAPE ID .)
    RIGHT           reduce using rule 28 (instruction_base -> CALL_SHAPE ID .)
    LINE            reduce using rule 28 (instruction_base -> CALL_SHAPE ID .)
    JUMP            reduce using rule 28 (instruction_base -> CALL_SHAPE ID .)
    NILL            reduce using rule 28 (instruction_base -> CALL_SHAPE ID .)
    PUSH            reduce using rule 28 (instruction_base -> CALL_SHAPE ID .)
    POP             reduce using rule 28 (instruction_base -> CALL_SHAPE ID .)
    CALL_SHAPE      reduce using rule 28 (instruction_base -> CALL_SHAPE ID .)
    C_KEY           reduce using rule 28 (instruction_base -> CALL_SHAPE ID .)
    ITER            reduce using rule 28 (instruction_base -> CALL_SHAPE ID .)


state 53

    (16) rule -> RULE ID O_KEY base instructions . loop C_KEY
    (33) loop -> . ITER INT
    (34) loop -> .

    ITER            shift and go to state 63
    C_KEY           reduce using rule 34 (loop -> .)

    loop                           shift and go to state 62

state 54

    (29) instructions -> instruction . instructions
    (30) instructions -> instruction .
    (29) instructions -> . instruction instructions
    (30) instructions -> . instruction
    (31) instruction -> . instruction_base
    (32) instruction -> . CALL_RULE ID
    (21) instruction_base -> . LEFT INT
    (22) instruction_base -> . RIGHT INT
    (23) instruction_base -> . LINE INT
    (24) instruction_base -> . JUMP INT COMMA INT
    (25) instruction_base -> . NILL
    (26) instruction_base -> . PUSH INT COMMA INT
    (27) instruction_base -> . POP
    (28) instruction_base -> . CALL_SHAPE ID

    ITER            reduce using rule 30 (instructions -> instruction .)
    C_KEY           reduce using rule 30 (instructions -> instruction .)
    CALL_RULE       shift and go to state 56
    LEFT            shift and go to state 34
    RIGHT           shift and go to state 35
    LINE            shift and go to state 36
    JUMP            shift and go to state 37
    NILL            shift and go to state 38
    PUSH            shift and go to state 39
    POP             shift and go to state 40
    CALL_SHAPE      shift and go to state 41

    instruction                    shift and go to state 54
    instructions                   shift and go to state 64
    instruction_base               shift and go to state 55

state 55

    (31) instruction -> instruction_base .

    CALL_RULE       reduce using rule 31 (instruction -> instruction_base .)
    LEFT            reduce using rule 31 (instruction -> instruction_base .)
    RIGHT           reduce using rule 31 (instruction -> instruction_base .)
    LINE            reduce using rule 31 (instruction -> instruction_base .)
    JUMP            reduce using rule 31 (instruction -> instruction_base .)
    NILL            reduce using rule 31 (instruction -> instruction_base .)
    PUSH            reduce using rule 31 (instruction -> instruction_base .)
    POP             reduce using rule 31 (instruction -> instruction_base .)
    CALL_SHAPE      reduce using rule 31 (instruction -> instruction_base .)
    ITER            reduce using rule 31 (instruction -> instruction_base .)
    C_KEY           reduce using rule 31 (instruction -> instruction_base .)


state 56

    (32) instruction -> CALL_RULE . ID

    ID              shift and go to state 65


state 57

    (17) base -> BASE TWO_POINT . instruction_base
    (21) instruction_base -> . LEFT INT
    (22) instruction_base -> . RIGHT INT
    (23) instruction_base -> . LINE INT
    (24) instruction_base -> . JUMP INT COMMA INT
    (25) instruction_base -> . NILL
    (26) instruction_base -> . PUSH INT COMMA INT
    (27) instruction_base -> . POP
    (28) instruction_base -> . CALL_SHAPE ID

    LEFT            shift and go to state 34
    RIGHT           shift and go to state 35
    LINE            shift and go to state 36
    JUMP            shift and go to state 37
    NILL            shift and go to state 38
    PUSH            shift and go to state 39
    POP             shift and go to state 40
    CALL_SHAPE      shift and go to state 41

    instruction_base               shift and go to state 66

state 58

    (18) base -> BASE O_KEY . instructions_base C_KEY
    (19) instructions_base -> . instruction_base instructions_base
    (20) instructions_base -> . instruction_base
    (21) instruction_base -> . LEFT INT
    (22) instruction_base -> . RIGHT INT
    (23) instruction_base -> . LINE INT
    (24) instruction_base -> . JUMP INT COMMA INT
    (25) instruction_base -> . NILL
    (26) instruction_base -> . PUSH INT COMMA INT
    (27) instruction_base -> . POP
    (28) instruction_base -> . CALL_SHAPE ID

    LEFT            shift and go to state 34
    RIGHT           shift and go to state 35
    LINE            shift and go to state 36
    JUMP            shift and go to state 37
    NILL            shift and go to state 38
    PUSH            shift and go to state 39
    POP             shift and go to state 40
    CALL_SHAPE      shift and go to state 41

    instructions_base              shift and go to state 67
    instruction_base               shift and go to state 68

state 59

    (39) instruction_axiom -> CALL_RULE ID O_PAR . INT C_PAR

    INT             shift and go to state 69


state 60

    (24) instruction_base -> JUMP INT COMMA . INT

    INT             shift and go to state 70


state 61

    (26) instruction_base -> PUSH INT COMMA . INT

    INT             shift and go to state 71


state 62

    (16) rule -> RULE ID O_KEY base instructions loop . C_KEY

    C_KEY           shift and go to state 72


state 63

    (33) loop -> ITER . INT

    INT             shift and go to state 73


state 64

    (29) instructions -> instruction instructions .

    ITER            reduce using rule 29 (instructions -> instruction instructions .)
    C_KEY           reduce using rule 29 (instructions -> instruction instructions .)


state 65

    (32) instruction -> CALL_RULE ID .

    CALL_RULE       reduce using rule 32 (instruction -> CALL_RULE ID .)
    LEFT            reduce using rule 32 (instruction -> CALL_RULE ID .)
    RIGHT           reduce using rule 32 (instruction -> CALL_RULE ID .)
    LINE            reduce using rule 32 (instruction -> CALL_RULE ID .)
    JUMP            reduce using rule 32 (instruction -> CALL_RULE ID .)
    NILL            reduce using rule 32 (instruction -> CALL_RULE ID .)
    PUSH            reduce using rule 32 (instruction -> CALL_RULE ID .)
    POP             reduce using rule 32 (instruction -> CALL_RULE ID .)
    CALL_SHAPE      reduce using rule 32 (instruction -> CALL_RULE ID .)
    ITER            reduce using rule 32 (instruction -> CALL_RULE ID .)
    C_KEY           reduce using rule 32 (instruction -> CALL_RULE ID .)


state 66

    (17) base -> BASE TWO_POINT instruction_base .

    CALL_RULE       reduce using rule 17 (base -> BASE TWO_POINT instruction_base .)
    LEFT            reduce using rule 17 (base -> BASE TWO_POINT instruction_base .)
    RIGHT           reduce using rule 17 (base -> BASE TWO_POINT instruction_base .)
    LINE            reduce using rule 17 (base -> BASE TWO_POINT instruction_base .)
    JUMP            reduce using rule 17 (base -> BASE TWO_POINT instruction_base .)
    NILL            reduce using rule 17 (base -> BASE TWO_POINT instruction_base .)
    PUSH            reduce using rule 17 (base -> BASE TWO_POINT instruction_base .)
    POP             reduce using rule 17 (base -> BASE TWO_POINT instruction_base .)
    CALL_SHAPE      reduce using rule 17 (base -> BASE TWO_POINT instruction_base .)


state 67

    (18) base -> BASE O_KEY instructions_base . C_KEY

    C_KEY           shift and go to state 74


state 68

    (19) instructions_base -> instruction_base . instructions_base
    (20) instructions_base -> instruction_base .
    (19) instructions_base -> . instruction_base instructions_base
    (20) instructions_base -> . instruction_base
    (21) instruction_base -> . LEFT INT
    (22) instruction_base -> . RIGHT INT
    (23) instruction_base -> . LINE INT
    (24) instruction_base -> . JUMP INT COMMA INT
    (25) instruction_base -> . NILL
    (26) instruction_base -> . PUSH INT COMMA INT
    (27) instruction_base -> . POP
    (28) instruction_base -> . CALL_SHAPE ID

    C_KEY           reduce using rule 20 (instructions_base -> instruction_base .)
    LEFT            shift and go to state 34
    RIGHT           shift and go to state 35
    LINE            shift and go to state 36
    JUMP            shift and go to state 37
    NILL            shift and go to state 38
    PUSH            shift and go to state 39
    POP             shift and go to state 40
    CALL_SHAPE      shift and go to state 41

    instruction_base               shift and go to state 68
    instructions_base              shift and go to state 75

state 69

    (39) instruction_axiom -> CALL_RULE ID O_PAR INT . C_PAR

    C_PAR           shift and go to state 76


state 70

    (24) instruction_base -> JUMP INT COMMA INT .

    CALL_RULE       reduce using rule 24 (instruction_base -> JUMP INT COMMA INT .)
    LEFT            reduce using rule 24 (instruction_base -> JUMP INT COMMA INT .)
    RIGHT           reduce using rule 24 (instruction_base -> JUMP INT COMMA INT .)
    LINE            reduce using rule 24 (instruction_base -> JUMP INT COMMA INT .)
    JUMP            reduce using rule 24 (instruction_base -> JUMP INT COMMA INT .)
    NILL            reduce using rule 24 (instruction_base -> JUMP INT COMMA INT .)
    PUSH            reduce using rule 24 (instruction_base -> JUMP INT COMMA INT .)
    POP             reduce using rule 24 (instruction_base -> JUMP INT COMMA INT .)
    CALL_SHAPE      reduce using rule 24 (instruction_base -> JUMP INT COMMA INT .)
    C_KEY           reduce using rule 24 (instruction_base -> JUMP INT COMMA INT .)
    ITER            reduce using rule 24 (instruction_base -> JUMP INT COMMA INT .)


state 71

    (26) instruction_base -> PUSH INT COMMA INT .

    CALL_RULE       reduce using rule 26 (instruction_base -> PUSH INT COMMA INT .)
    LEFT            reduce using rule 26 (instruction_base -> PUSH INT COMMA INT .)
    RIGHT           reduce using rule 26 (instruction_base -> PUSH INT COMMA INT .)
    LINE            reduce using rule 26 (instruction_base -> PUSH INT COMMA INT .)
    JUMP            reduce using rule 26 (instruction_base -> PUSH INT COMMA INT .)
    NILL            reduce using rule 26 (instruction_base -> PUSH INT COMMA INT .)
    PUSH            reduce using rule 26 (instruction_base -> PUSH INT COMMA INT .)
    POP             reduce using rule 26 (instruction_base -> PUSH INT COMMA INT .)
    CALL_SHAPE      reduce using rule 26 (instruction_base -> PUSH INT COMMA INT .)
    C_KEY           reduce using rule 26 (instruction_base -> PUSH INT COMMA INT .)
    ITER            reduce using rule 26 (instruction_base -> PUSH INT COMMA INT .)


state 72

    (16) rule -> RULE ID O_KEY base instructions loop C_KEY .

    RULE            reduce using rule 16 (rule -> RULE ID O_KEY base instructions loop C_KEY .)
    AXIOM           reduce using rule 16 (rule -> RULE ID O_KEY base instructions loop C_KEY .)


state 73

    (33) loop -> ITER INT .

    C_KEY           reduce using rule 33 (loop -> ITER INT .)


state 74

    (18) base -> BASE O_KEY instructions_base C_KEY .

    CALL_RULE       reduce using rule 18 (base -> BASE O_KEY instructions_base C_KEY .)
    LEFT            reduce using rule 18 (base -> BASE O_KEY instructions_base C_KEY .)
    RIGHT           reduce using rule 18 (base -> BASE O_KEY instructions_base C_KEY .)
    LINE            reduce using rule 18 (base -> BASE O_KEY instructions_base C_KEY .)
    JUMP            reduce using rule 18 (base -> BASE O_KEY instructions_base C_KEY .)
    NILL            reduce using rule 18 (base -> BASE O_KEY instructions_base C_KEY .)
    PUSH            reduce using rule 18 (base -> BASE O_KEY instructions_base C_KEY .)
    POP             reduce using rule 18 (base -> BASE O_KEY instructions_base C_KEY .)
    CALL_SHAPE      reduce using rule 18 (base -> BASE O_KEY instructions_base C_KEY .)


state 75

    (19) instructions_base -> instruction_base instructions_base .

    C_KEY           reduce using rule 19 (instructions_base -> instruction_base instructions_base .)


state 76

    (39) instruction_axiom -> CALL_RULE ID O_PAR INT C_PAR .

    CALL_RULE       reduce using rule 39 (instruction_axiom -> CALL_RULE ID O_PAR INT C_PAR .)
    LEFT            reduce using rule 39 (instruction_axiom -> CALL_RULE ID O_PAR INT C_PAR .)
    RIGHT           reduce using rule 39 (instruction_axiom -> CALL_RULE ID O_PAR INT C_PAR .)
    LINE            reduce using rule 39 (instruction_axiom -> CALL_RULE ID O_PAR INT C_PAR .)
    JUMP            reduce using rule 39 (instruction_axiom -> CALL_RULE ID O_PAR INT C_PAR .)
    NILL            reduce using rule 39 (instruction_axiom -> CALL_RULE ID O_PAR INT C_PAR .)
    PUSH            reduce using rule 39 (instruction_axiom -> CALL_RULE ID O_PAR INT C_PAR .)
    POP             reduce using rule 39 (instruction_axiom -> CALL_RULE ID O_PAR INT C_PAR .)
    CALL_SHAPE      reduce using rule 39 (instruction_axiom -> CALL_RULE ID O_PAR INT C_PAR .)
    C_KEY           reduce using rule 39 (instruction_axiom -> CALL_RULE ID O_PAR INT C_PAR .)

