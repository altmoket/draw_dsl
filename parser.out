Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> scene
Rule 1     scene -> draws_instruction scene
Rule 2     scene -> draws_instruction
Rule 3     scene -> shapes
Rule 4     draws_instruction -> shapes draws
Rule 5     shapes -> shape shapes
Rule 6     shapes -> shape
Rule 7     draws -> draw draws
Rule 8     draws -> draw
Rule 9     draw -> DRAW ID INT COMMA INT
Rule 10    shape -> SHAPE ID pencil
Rule 11    pencil -> PENCIL ID fill
Rule 12    pencil -> fill
Rule 13    fill -> FILL ID axiom
Rule 14    fill -> axiom
Rule 15    axiom -> AXIOM O_KEY instructions C_KEY rules
Rule 16    rules -> rule rules
Rule 17    rules -> depth
Rule 18    rule -> RULE ID O_KEY base instructions loops
Rule 19    base -> BASE TWO_POINT instruction_base
Rule 20    base -> BASE O_KEY instructions_base C_KEY
Rule 21    instructions -> instruction instructions
Rule 22    instructions -> instruction
Rule 23    instruction -> LEFT INT
Rule 24    instruction -> LEFT FLOAT
Rule 25    instruction -> RIGHT INT
Rule 26    instruction -> RIGHT FLOAT
Rule 27    instruction -> LINE INT
Rule 28    instruction -> JUMP INT COMMA INT
Rule 29    instruction -> NILL
Rule 30    instruction -> PUSH INT COMMA INT
Rule 31    instruction -> POP
Rule 32    instruction -> CALL_RULE ID
Rule 33    instruction -> CALL_SHAPE ID
Rule 34    instruction_base -> LEFT INT
Rule 35    instruction_base -> LEFT FLOAT
Rule 36    instruction_base -> RIGHT INT
Rule 37    instruction_base -> RIGHT FLOAT
Rule 38    instruction_base -> LINE INT
Rule 39    instruction_base -> JUMP INT COMMA INT
Rule 40    instruction_base -> NILL
Rule 41    instruction_base -> PUSH INT COMMA INT
Rule 42    instruction_base -> POP
Rule 43    instructions_base -> instruction_base instructions_base
Rule 44    instructions_base -> instruction_base
Rule 45    depth -> DEPTH INT
Rule 46    loops -> ITER INT C_KEY
Rule 47    loops -> C_KEY

Terminals, with rules where they appear

AXIOM                : 15
BASE                 : 19 20
CALL_RULE            : 32
CALL_SHAPE           : 33
COMMA                : 9 28 30 39 41
C_KEY                : 15 20 46 47
DEPTH                : 45
DRAW                 : 9
FILL                 : 13
FLOAT                : 24 26 35 37
ID                   : 9 10 11 13 18 32 33
INT                  : 9 9 23 25 27 28 28 30 30 34 36 38 39 39 41 41 45 46
ITER                 : 46
JUMP                 : 28 39
LEFT                 : 23 24 34 35
LINE                 : 27 38
NILL                 : 29 40
O_KEY                : 15 18 20
PENCIL               : 11
POP                  : 31 42
PUSH                 : 30 41
RIGHT                : 25 26 36 37
RULE                 : 18
SHAPE                : 10
TWO_POINT            : 19
error                : 

Nonterminals, with rules where they appear

axiom                : 13 14
base                 : 18
depth                : 17
draw                 : 7 8
draws                : 4 7
draws_instruction    : 1 2
fill                 : 11 12
instruction          : 21 22
instruction_base     : 19 43 44
instructions         : 15 18 21
instructions_base    : 20 43
loops                : 18
pencil               : 10
rule                 : 16
rules                : 15 16
scene                : 1 0
shape                : 5 6
shapes               : 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . scene
    (1) scene -> . draws_instruction scene
    (2) scene -> . draws_instruction
    (3) scene -> . shapes
    (4) draws_instruction -> . shapes draws
    (5) shapes -> . shape shapes
    (6) shapes -> . shape
    (10) shape -> . SHAPE ID pencil

    SHAPE           shift and go to state 5

    scene                          shift and go to state 1
    draws_instruction              shift and go to state 2
    shapes                         shift and go to state 3
    shape                          shift and go to state 4

state 1

    (0) S' -> scene .



state 2

    (1) scene -> draws_instruction . scene
    (2) scene -> draws_instruction .
    (1) scene -> . draws_instruction scene
    (2) scene -> . draws_instruction
    (3) scene -> . shapes
    (4) draws_instruction -> . shapes draws
    (5) shapes -> . shape shapes
    (6) shapes -> . shape
    (10) shape -> . SHAPE ID pencil

    $end            reduce using rule 2 (scene -> draws_instruction .)
    SHAPE           shift and go to state 5

    draws_instruction              shift and go to state 2
    scene                          shift and go to state 6
    shapes                         shift and go to state 3
    shape                          shift and go to state 4

state 3

    (3) scene -> shapes .
    (4) draws_instruction -> shapes . draws
    (7) draws -> . draw draws
    (8) draws -> . draw
    (9) draw -> . DRAW ID INT COMMA INT

    $end            reduce using rule 3 (scene -> shapes .)
    DRAW            shift and go to state 9

    draws                          shift and go to state 7
    draw                           shift and go to state 8

state 4

    (5) shapes -> shape . shapes
    (6) shapes -> shape .
    (5) shapes -> . shape shapes
    (6) shapes -> . shape
    (10) shape -> . SHAPE ID pencil

    DRAW            reduce using rule 6 (shapes -> shape .)
    $end            reduce using rule 6 (shapes -> shape .)
    SHAPE           shift and go to state 5

    shape                          shift and go to state 4
    shapes                         shift and go to state 10

state 5

    (10) shape -> SHAPE . ID pencil

    ID              shift and go to state 11


state 6

    (1) scene -> draws_instruction scene .

    $end            reduce using rule 1 (scene -> draws_instruction scene .)


state 7

    (4) draws_instruction -> shapes draws .

    SHAPE           reduce using rule 4 (draws_instruction -> shapes draws .)
    $end            reduce using rule 4 (draws_instruction -> shapes draws .)


state 8

    (7) draws -> draw . draws
    (8) draws -> draw .
    (7) draws -> . draw draws
    (8) draws -> . draw
    (9) draw -> . DRAW ID INT COMMA INT

    SHAPE           reduce using rule 8 (draws -> draw .)
    $end            reduce using rule 8 (draws -> draw .)
    DRAW            shift and go to state 9

    draw                           shift and go to state 8
    draws                          shift and go to state 12

state 9

    (9) draw -> DRAW . ID INT COMMA INT

    ID              shift and go to state 13


state 10

    (5) shapes -> shape shapes .

    DRAW            reduce using rule 5 (shapes -> shape shapes .)
    $end            reduce using rule 5 (shapes -> shape shapes .)


state 11

    (10) shape -> SHAPE ID . pencil
    (11) pencil -> . PENCIL ID fill
    (12) pencil -> . fill
    (13) fill -> . FILL ID axiom
    (14) fill -> . axiom
    (15) axiom -> . AXIOM O_KEY instructions C_KEY rules

    PENCIL          shift and go to state 15
    FILL            shift and go to state 17
    AXIOM           shift and go to state 19

    pencil                         shift and go to state 14
    fill                           shift and go to state 16
    axiom                          shift and go to state 18

state 12

    (7) draws -> draw draws .

    SHAPE           reduce using rule 7 (draws -> draw draws .)
    $end            reduce using rule 7 (draws -> draw draws .)


state 13

    (9) draw -> DRAW ID . INT COMMA INT

    INT             shift and go to state 20


state 14

    (10) shape -> SHAPE ID pencil .

    SHAPE           reduce using rule 10 (shape -> SHAPE ID pencil .)
    DRAW            reduce using rule 10 (shape -> SHAPE ID pencil .)
    $end            reduce using rule 10 (shape -> SHAPE ID pencil .)


state 15

    (11) pencil -> PENCIL . ID fill

    ID              shift and go to state 21


state 16

    (12) pencil -> fill .

    SHAPE           reduce using rule 12 (pencil -> fill .)
    DRAW            reduce using rule 12 (pencil -> fill .)
    $end            reduce using rule 12 (pencil -> fill .)


state 17

    (13) fill -> FILL . ID axiom

    ID              shift and go to state 22


state 18

    (14) fill -> axiom .

    SHAPE           reduce using rule 14 (fill -> axiom .)
    DRAW            reduce using rule 14 (fill -> axiom .)
    $end            reduce using rule 14 (fill -> axiom .)


state 19

    (15) axiom -> AXIOM . O_KEY instructions C_KEY rules

    O_KEY           shift and go to state 23


state 20

    (9) draw -> DRAW ID INT . COMMA INT

    COMMA           shift and go to state 24


state 21

    (11) pencil -> PENCIL ID . fill
    (13) fill -> . FILL ID axiom
    (14) fill -> . axiom
    (15) axiom -> . AXIOM O_KEY instructions C_KEY rules

    FILL            shift and go to state 17
    AXIOM           shift and go to state 19

    fill                           shift and go to state 25
    axiom                          shift and go to state 18

state 22

    (13) fill -> FILL ID . axiom
    (15) axiom -> . AXIOM O_KEY instructions C_KEY rules

    AXIOM           shift and go to state 19

    axiom                          shift and go to state 26

state 23

    (15) axiom -> AXIOM O_KEY . instructions C_KEY rules
    (21) instructions -> . instruction instructions
    (22) instructions -> . instruction
    (23) instruction -> . LEFT INT
    (24) instruction -> . LEFT FLOAT
    (25) instruction -> . RIGHT INT
    (26) instruction -> . RIGHT FLOAT
    (27) instruction -> . LINE INT
    (28) instruction -> . JUMP INT COMMA INT
    (29) instruction -> . NILL
    (30) instruction -> . PUSH INT COMMA INT
    (31) instruction -> . POP
    (32) instruction -> . CALL_RULE ID
    (33) instruction -> . CALL_SHAPE ID

    LEFT            shift and go to state 29
    RIGHT           shift and go to state 30
    LINE            shift and go to state 31
    JUMP            shift and go to state 32
    NILL            shift and go to state 33
    PUSH            shift and go to state 34
    POP             shift and go to state 35
    CALL_RULE       shift and go to state 36
    CALL_SHAPE      shift and go to state 37

    instructions                   shift and go to state 27
    instruction                    shift and go to state 28

state 24

    (9) draw -> DRAW ID INT COMMA . INT

    INT             shift and go to state 38


state 25

    (11) pencil -> PENCIL ID fill .

    SHAPE           reduce using rule 11 (pencil -> PENCIL ID fill .)
    DRAW            reduce using rule 11 (pencil -> PENCIL ID fill .)
    $end            reduce using rule 11 (pencil -> PENCIL ID fill .)


state 26

    (13) fill -> FILL ID axiom .

    SHAPE           reduce using rule 13 (fill -> FILL ID axiom .)
    DRAW            reduce using rule 13 (fill -> FILL ID axiom .)
    $end            reduce using rule 13 (fill -> FILL ID axiom .)


state 27

    (15) axiom -> AXIOM O_KEY instructions . C_KEY rules

    C_KEY           shift and go to state 39


state 28

    (21) instructions -> instruction . instructions
    (22) instructions -> instruction .
    (21) instructions -> . instruction instructions
    (22) instructions -> . instruction
    (23) instruction -> . LEFT INT
    (24) instruction -> . LEFT FLOAT
    (25) instruction -> . RIGHT INT
    (26) instruction -> . RIGHT FLOAT
    (27) instruction -> . LINE INT
    (28) instruction -> . JUMP INT COMMA INT
    (29) instruction -> . NILL
    (30) instruction -> . PUSH INT COMMA INT
    (31) instruction -> . POP
    (32) instruction -> . CALL_RULE ID
    (33) instruction -> . CALL_SHAPE ID

    C_KEY           reduce using rule 22 (instructions -> instruction .)
    ITER            reduce using rule 22 (instructions -> instruction .)
    LEFT            shift and go to state 29
    RIGHT           shift and go to state 30
    LINE            shift and go to state 31
    JUMP            shift and go to state 32
    NILL            shift and go to state 33
    PUSH            shift and go to state 34
    POP             shift and go to state 35
    CALL_RULE       shift and go to state 36
    CALL_SHAPE      shift and go to state 37

    instruction                    shift and go to state 28
    instructions                   shift and go to state 40

state 29

    (23) instruction -> LEFT . INT
    (24) instruction -> LEFT . FLOAT

    INT             shift and go to state 41
    FLOAT           shift and go to state 42


state 30

    (25) instruction -> RIGHT . INT
    (26) instruction -> RIGHT . FLOAT

    INT             shift and go to state 43
    FLOAT           shift and go to state 44


state 31

    (27) instruction -> LINE . INT

    INT             shift and go to state 45


state 32

    (28) instruction -> JUMP . INT COMMA INT

    INT             shift and go to state 46


state 33

    (29) instruction -> NILL .

    LEFT            reduce using rule 29 (instruction -> NILL .)
    RIGHT           reduce using rule 29 (instruction -> NILL .)
    LINE            reduce using rule 29 (instruction -> NILL .)
    JUMP            reduce using rule 29 (instruction -> NILL .)
    NILL            reduce using rule 29 (instruction -> NILL .)
    PUSH            reduce using rule 29 (instruction -> NILL .)
    POP             reduce using rule 29 (instruction -> NILL .)
    CALL_RULE       reduce using rule 29 (instruction -> NILL .)
    CALL_SHAPE      reduce using rule 29 (instruction -> NILL .)
    C_KEY           reduce using rule 29 (instruction -> NILL .)
    ITER            reduce using rule 29 (instruction -> NILL .)


state 34

    (30) instruction -> PUSH . INT COMMA INT

    INT             shift and go to state 47


state 35

    (31) instruction -> POP .

    LEFT            reduce using rule 31 (instruction -> POP .)
    RIGHT           reduce using rule 31 (instruction -> POP .)
    LINE            reduce using rule 31 (instruction -> POP .)
    JUMP            reduce using rule 31 (instruction -> POP .)
    NILL            reduce using rule 31 (instruction -> POP .)
    PUSH            reduce using rule 31 (instruction -> POP .)
    POP             reduce using rule 31 (instruction -> POP .)
    CALL_RULE       reduce using rule 31 (instruction -> POP .)
    CALL_SHAPE      reduce using rule 31 (instruction -> POP .)
    C_KEY           reduce using rule 31 (instruction -> POP .)
    ITER            reduce using rule 31 (instruction -> POP .)


state 36

    (32) instruction -> CALL_RULE . ID

    ID              shift and go to state 48


state 37

    (33) instruction -> CALL_SHAPE . ID

    ID              shift and go to state 49


state 38

    (9) draw -> DRAW ID INT COMMA INT .

    DRAW            reduce using rule 9 (draw -> DRAW ID INT COMMA INT .)
    SHAPE           reduce using rule 9 (draw -> DRAW ID INT COMMA INT .)
    $end            reduce using rule 9 (draw -> DRAW ID INT COMMA INT .)


state 39

    (15) axiom -> AXIOM O_KEY instructions C_KEY . rules
    (16) rules -> . rule rules
    (17) rules -> . depth
    (18) rule -> . RULE ID O_KEY base instructions loops
    (45) depth -> . DEPTH INT

    RULE            shift and go to state 53
    DEPTH           shift and go to state 54

    rules                          shift and go to state 50
    rule                           shift and go to state 51
    depth                          shift and go to state 52

state 40

    (21) instructions -> instruction instructions .

    C_KEY           reduce using rule 21 (instructions -> instruction instructions .)
    ITER            reduce using rule 21 (instructions -> instruction instructions .)


state 41

    (23) instruction -> LEFT INT .

    LEFT            reduce using rule 23 (instruction -> LEFT INT .)
    RIGHT           reduce using rule 23 (instruction -> LEFT INT .)
    LINE            reduce using rule 23 (instruction -> LEFT INT .)
    JUMP            reduce using rule 23 (instruction -> LEFT INT .)
    NILL            reduce using rule 23 (instruction -> LEFT INT .)
    PUSH            reduce using rule 23 (instruction -> LEFT INT .)
    POP             reduce using rule 23 (instruction -> LEFT INT .)
    CALL_RULE       reduce using rule 23 (instruction -> LEFT INT .)
    CALL_SHAPE      reduce using rule 23 (instruction -> LEFT INT .)
    C_KEY           reduce using rule 23 (instruction -> LEFT INT .)
    ITER            reduce using rule 23 (instruction -> LEFT INT .)


state 42

    (24) instruction -> LEFT FLOAT .

    LEFT            reduce using rule 24 (instruction -> LEFT FLOAT .)
    RIGHT           reduce using rule 24 (instruction -> LEFT FLOAT .)
    LINE            reduce using rule 24 (instruction -> LEFT FLOAT .)
    JUMP            reduce using rule 24 (instruction -> LEFT FLOAT .)
    NILL            reduce using rule 24 (instruction -> LEFT FLOAT .)
    PUSH            reduce using rule 24 (instruction -> LEFT FLOAT .)
    POP             reduce using rule 24 (instruction -> LEFT FLOAT .)
    CALL_RULE       reduce using rule 24 (instruction -> LEFT FLOAT .)
    CALL_SHAPE      reduce using rule 24 (instruction -> LEFT FLOAT .)
    C_KEY           reduce using rule 24 (instruction -> LEFT FLOAT .)
    ITER            reduce using rule 24 (instruction -> LEFT FLOAT .)


state 43

    (25) instruction -> RIGHT INT .

    LEFT            reduce using rule 25 (instruction -> RIGHT INT .)
    RIGHT           reduce using rule 25 (instruction -> RIGHT INT .)
    LINE            reduce using rule 25 (instruction -> RIGHT INT .)
    JUMP            reduce using rule 25 (instruction -> RIGHT INT .)
    NILL            reduce using rule 25 (instruction -> RIGHT INT .)
    PUSH            reduce using rule 25 (instruction -> RIGHT INT .)
    POP             reduce using rule 25 (instruction -> RIGHT INT .)
    CALL_RULE       reduce using rule 25 (instruction -> RIGHT INT .)
    CALL_SHAPE      reduce using rule 25 (instruction -> RIGHT INT .)
    C_KEY           reduce using rule 25 (instruction -> RIGHT INT .)
    ITER            reduce using rule 25 (instruction -> RIGHT INT .)


state 44

    (26) instruction -> RIGHT FLOAT .

    LEFT            reduce using rule 26 (instruction -> RIGHT FLOAT .)
    RIGHT           reduce using rule 26 (instruction -> RIGHT FLOAT .)
    LINE            reduce using rule 26 (instruction -> RIGHT FLOAT .)
    JUMP            reduce using rule 26 (instruction -> RIGHT FLOAT .)
    NILL            reduce using rule 26 (instruction -> RIGHT FLOAT .)
    PUSH            reduce using rule 26 (instruction -> RIGHT FLOAT .)
    POP             reduce using rule 26 (instruction -> RIGHT FLOAT .)
    CALL_RULE       reduce using rule 26 (instruction -> RIGHT FLOAT .)
    CALL_SHAPE      reduce using rule 26 (instruction -> RIGHT FLOAT .)
    C_KEY           reduce using rule 26 (instruction -> RIGHT FLOAT .)
    ITER            reduce using rule 26 (instruction -> RIGHT FLOAT .)


state 45

    (27) instruction -> LINE INT .

    LEFT            reduce using rule 27 (instruction -> LINE INT .)
    RIGHT           reduce using rule 27 (instruction -> LINE INT .)
    LINE            reduce using rule 27 (instruction -> LINE INT .)
    JUMP            reduce using rule 27 (instruction -> LINE INT .)
    NILL            reduce using rule 27 (instruction -> LINE INT .)
    PUSH            reduce using rule 27 (instruction -> LINE INT .)
    POP             reduce using rule 27 (instruction -> LINE INT .)
    CALL_RULE       reduce using rule 27 (instruction -> LINE INT .)
    CALL_SHAPE      reduce using rule 27 (instruction -> LINE INT .)
    C_KEY           reduce using rule 27 (instruction -> LINE INT .)
    ITER            reduce using rule 27 (instruction -> LINE INT .)


state 46

    (28) instruction -> JUMP INT . COMMA INT

    COMMA           shift and go to state 55


state 47

    (30) instruction -> PUSH INT . COMMA INT

    COMMA           shift and go to state 56


state 48

    (32) instruction -> CALL_RULE ID .

    LEFT            reduce using rule 32 (instruction -> CALL_RULE ID .)
    RIGHT           reduce using rule 32 (instruction -> CALL_RULE ID .)
    LINE            reduce using rule 32 (instruction -> CALL_RULE ID .)
    JUMP            reduce using rule 32 (instruction -> CALL_RULE ID .)
    NILL            reduce using rule 32 (instruction -> CALL_RULE ID .)
    PUSH            reduce using rule 32 (instruction -> CALL_RULE ID .)
    POP             reduce using rule 32 (instruction -> CALL_RULE ID .)
    CALL_RULE       reduce using rule 32 (instruction -> CALL_RULE ID .)
    CALL_SHAPE      reduce using rule 32 (instruction -> CALL_RULE ID .)
    C_KEY           reduce using rule 32 (instruction -> CALL_RULE ID .)
    ITER            reduce using rule 32 (instruction -> CALL_RULE ID .)


state 49

    (33) instruction -> CALL_SHAPE ID .

    LEFT            reduce using rule 33 (instruction -> CALL_SHAPE ID .)
    RIGHT           reduce using rule 33 (instruction -> CALL_SHAPE ID .)
    LINE            reduce using rule 33 (instruction -> CALL_SHAPE ID .)
    JUMP            reduce using rule 33 (instruction -> CALL_SHAPE ID .)
    NILL            reduce using rule 33 (instruction -> CALL_SHAPE ID .)
    PUSH            reduce using rule 33 (instruction -> CALL_SHAPE ID .)
    POP             reduce using rule 33 (instruction -> CALL_SHAPE ID .)
    CALL_RULE       reduce using rule 33 (instruction -> CALL_SHAPE ID .)
    CALL_SHAPE      reduce using rule 33 (instruction -> CALL_SHAPE ID .)
    C_KEY           reduce using rule 33 (instruction -> CALL_SHAPE ID .)
    ITER            reduce using rule 33 (instruction -> CALL_SHAPE ID .)


state 50

    (15) axiom -> AXIOM O_KEY instructions C_KEY rules .

    SHAPE           reduce using rule 15 (axiom -> AXIOM O_KEY instructions C_KEY rules .)
    DRAW            reduce using rule 15 (axiom -> AXIOM O_KEY instructions C_KEY rules .)
    $end            reduce using rule 15 (axiom -> AXIOM O_KEY instructions C_KEY rules .)


state 51

    (16) rules -> rule . rules
    (16) rules -> . rule rules
    (17) rules -> . depth
    (18) rule -> . RULE ID O_KEY base instructions loops
    (45) depth -> . DEPTH INT

    RULE            shift and go to state 53
    DEPTH           shift and go to state 54

    rule                           shift and go to state 51
    rules                          shift and go to state 57
    depth                          shift and go to state 52

state 52

    (17) rules -> depth .

    SHAPE           reduce using rule 17 (rules -> depth .)
    DRAW            reduce using rule 17 (rules -> depth .)
    $end            reduce using rule 17 (rules -> depth .)


state 53

    (18) rule -> RULE . ID O_KEY base instructions loops

    ID              shift and go to state 58


state 54

    (45) depth -> DEPTH . INT

    INT             shift and go to state 59


state 55

    (28) instruction -> JUMP INT COMMA . INT

    INT             shift and go to state 60


state 56

    (30) instruction -> PUSH INT COMMA . INT

    INT             shift and go to state 61


state 57

    (16) rules -> rule rules .

    SHAPE           reduce using rule 16 (rules -> rule rules .)
    DRAW            reduce using rule 16 (rules -> rule rules .)
    $end            reduce using rule 16 (rules -> rule rules .)


state 58

    (18) rule -> RULE ID . O_KEY base instructions loops

    O_KEY           shift and go to state 62


state 59

    (45) depth -> DEPTH INT .

    SHAPE           reduce using rule 45 (depth -> DEPTH INT .)
    DRAW            reduce using rule 45 (depth -> DEPTH INT .)
    $end            reduce using rule 45 (depth -> DEPTH INT .)


state 60

    (28) instruction -> JUMP INT COMMA INT .

    LEFT            reduce using rule 28 (instruction -> JUMP INT COMMA INT .)
    RIGHT           reduce using rule 28 (instruction -> JUMP INT COMMA INT .)
    LINE            reduce using rule 28 (instruction -> JUMP INT COMMA INT .)
    JUMP            reduce using rule 28 (instruction -> JUMP INT COMMA INT .)
    NILL            reduce using rule 28 (instruction -> JUMP INT COMMA INT .)
    PUSH            reduce using rule 28 (instruction -> JUMP INT COMMA INT .)
    POP             reduce using rule 28 (instruction -> JUMP INT COMMA INT .)
    CALL_RULE       reduce using rule 28 (instruction -> JUMP INT COMMA INT .)
    CALL_SHAPE      reduce using rule 28 (instruction -> JUMP INT COMMA INT .)
    C_KEY           reduce using rule 28 (instruction -> JUMP INT COMMA INT .)
    ITER            reduce using rule 28 (instruction -> JUMP INT COMMA INT .)


state 61

    (30) instruction -> PUSH INT COMMA INT .

    LEFT            reduce using rule 30 (instruction -> PUSH INT COMMA INT .)
    RIGHT           reduce using rule 30 (instruction -> PUSH INT COMMA INT .)
    LINE            reduce using rule 30 (instruction -> PUSH INT COMMA INT .)
    JUMP            reduce using rule 30 (instruction -> PUSH INT COMMA INT .)
    NILL            reduce using rule 30 (instruction -> PUSH INT COMMA INT .)
    PUSH            reduce using rule 30 (instruction -> PUSH INT COMMA INT .)
    POP             reduce using rule 30 (instruction -> PUSH INT COMMA INT .)
    CALL_RULE       reduce using rule 30 (instruction -> PUSH INT COMMA INT .)
    CALL_SHAPE      reduce using rule 30 (instruction -> PUSH INT COMMA INT .)
    C_KEY           reduce using rule 30 (instruction -> PUSH INT COMMA INT .)
    ITER            reduce using rule 30 (instruction -> PUSH INT COMMA INT .)


state 62

    (18) rule -> RULE ID O_KEY . base instructions loops
    (19) base -> . BASE TWO_POINT instruction_base
    (20) base -> . BASE O_KEY instructions_base C_KEY

    BASE            shift and go to state 64

    base                           shift and go to state 63

state 63

    (18) rule -> RULE ID O_KEY base . instructions loops
    (21) instructions -> . instruction instructions
    (22) instructions -> . instruction
    (23) instruction -> . LEFT INT
    (24) instruction -> . LEFT FLOAT
    (25) instruction -> . RIGHT INT
    (26) instruction -> . RIGHT FLOAT
    (27) instruction -> . LINE INT
    (28) instruction -> . JUMP INT COMMA INT
    (29) instruction -> . NILL
    (30) instruction -> . PUSH INT COMMA INT
    (31) instruction -> . POP
    (32) instruction -> . CALL_RULE ID
    (33) instruction -> . CALL_SHAPE ID

    LEFT            shift and go to state 29
    RIGHT           shift and go to state 30
    LINE            shift and go to state 31
    JUMP            shift and go to state 32
    NILL            shift and go to state 33
    PUSH            shift and go to state 34
    POP             shift and go to state 35
    CALL_RULE       shift and go to state 36
    CALL_SHAPE      shift and go to state 37

    instructions                   shift and go to state 65
    instruction                    shift and go to state 28

state 64

    (19) base -> BASE . TWO_POINT instruction_base
    (20) base -> BASE . O_KEY instructions_base C_KEY

    TWO_POINT       shift and go to state 66
    O_KEY           shift and go to state 67


state 65

    (18) rule -> RULE ID O_KEY base instructions . loops
    (46) loops -> . ITER INT C_KEY
    (47) loops -> . C_KEY

    ITER            shift and go to state 69
    C_KEY           shift and go to state 70

    loops                          shift and go to state 68

state 66

    (19) base -> BASE TWO_POINT . instruction_base
    (34) instruction_base -> . LEFT INT
    (35) instruction_base -> . LEFT FLOAT
    (36) instruction_base -> . RIGHT INT
    (37) instruction_base -> . RIGHT FLOAT
    (38) instruction_base -> . LINE INT
    (39) instruction_base -> . JUMP INT COMMA INT
    (40) instruction_base -> . NILL
    (41) instruction_base -> . PUSH INT COMMA INT
    (42) instruction_base -> . POP

    LEFT            shift and go to state 72
    RIGHT           shift and go to state 73
    LINE            shift and go to state 74
    JUMP            shift and go to state 75
    NILL            shift and go to state 76
    PUSH            shift and go to state 77
    POP             shift and go to state 78

    instruction_base               shift and go to state 71

state 67

    (20) base -> BASE O_KEY . instructions_base C_KEY
    (43) instructions_base -> . instruction_base instructions_base
    (44) instructions_base -> . instruction_base
    (34) instruction_base -> . LEFT INT
    (35) instruction_base -> . LEFT FLOAT
    (36) instruction_base -> . RIGHT INT
    (37) instruction_base -> . RIGHT FLOAT
    (38) instruction_base -> . LINE INT
    (39) instruction_base -> . JUMP INT COMMA INT
    (40) instruction_base -> . NILL
    (41) instruction_base -> . PUSH INT COMMA INT
    (42) instruction_base -> . POP

    LEFT            shift and go to state 72
    RIGHT           shift and go to state 73
    LINE            shift and go to state 74
    JUMP            shift and go to state 75
    NILL            shift and go to state 76
    PUSH            shift and go to state 77
    POP             shift and go to state 78

    instructions_base              shift and go to state 79
    instruction_base               shift and go to state 80

state 68

    (18) rule -> RULE ID O_KEY base instructions loops .

    RULE            reduce using rule 18 (rule -> RULE ID O_KEY base instructions loops .)
    DEPTH           reduce using rule 18 (rule -> RULE ID O_KEY base instructions loops .)


state 69

    (46) loops -> ITER . INT C_KEY

    INT             shift and go to state 81


state 70

    (47) loops -> C_KEY .

    RULE            reduce using rule 47 (loops -> C_KEY .)
    DEPTH           reduce using rule 47 (loops -> C_KEY .)


state 71

    (19) base -> BASE TWO_POINT instruction_base .

    LEFT            reduce using rule 19 (base -> BASE TWO_POINT instruction_base .)
    RIGHT           reduce using rule 19 (base -> BASE TWO_POINT instruction_base .)
    LINE            reduce using rule 19 (base -> BASE TWO_POINT instruction_base .)
    JUMP            reduce using rule 19 (base -> BASE TWO_POINT instruction_base .)
    NILL            reduce using rule 19 (base -> BASE TWO_POINT instruction_base .)
    PUSH            reduce using rule 19 (base -> BASE TWO_POINT instruction_base .)
    POP             reduce using rule 19 (base -> BASE TWO_POINT instruction_base .)
    CALL_RULE       reduce using rule 19 (base -> BASE TWO_POINT instruction_base .)
    CALL_SHAPE      reduce using rule 19 (base -> BASE TWO_POINT instruction_base .)


state 72

    (34) instruction_base -> LEFT . INT
    (35) instruction_base -> LEFT . FLOAT

    INT             shift and go to state 82
    FLOAT           shift and go to state 83


state 73

    (36) instruction_base -> RIGHT . INT
    (37) instruction_base -> RIGHT . FLOAT

    INT             shift and go to state 84
    FLOAT           shift and go to state 85


state 74

    (38) instruction_base -> LINE . INT

    INT             shift and go to state 86


state 75

    (39) instruction_base -> JUMP . INT COMMA INT

    INT             shift and go to state 87


state 76

    (40) instruction_base -> NILL .

    LEFT            reduce using rule 40 (instruction_base -> NILL .)
    RIGHT           reduce using rule 40 (instruction_base -> NILL .)
    LINE            reduce using rule 40 (instruction_base -> NILL .)
    JUMP            reduce using rule 40 (instruction_base -> NILL .)
    NILL            reduce using rule 40 (instruction_base -> NILL .)
    PUSH            reduce using rule 40 (instruction_base -> NILL .)
    POP             reduce using rule 40 (instruction_base -> NILL .)
    CALL_RULE       reduce using rule 40 (instruction_base -> NILL .)
    CALL_SHAPE      reduce using rule 40 (instruction_base -> NILL .)
    C_KEY           reduce using rule 40 (instruction_base -> NILL .)


state 77

    (41) instruction_base -> PUSH . INT COMMA INT

    INT             shift and go to state 88


state 78

    (42) instruction_base -> POP .

    LEFT            reduce using rule 42 (instruction_base -> POP .)
    RIGHT           reduce using rule 42 (instruction_base -> POP .)
    LINE            reduce using rule 42 (instruction_base -> POP .)
    JUMP            reduce using rule 42 (instruction_base -> POP .)
    NILL            reduce using rule 42 (instruction_base -> POP .)
    PUSH            reduce using rule 42 (instruction_base -> POP .)
    POP             reduce using rule 42 (instruction_base -> POP .)
    CALL_RULE       reduce using rule 42 (instruction_base -> POP .)
    CALL_SHAPE      reduce using rule 42 (instruction_base -> POP .)
    C_KEY           reduce using rule 42 (instruction_base -> POP .)


state 79

    (20) base -> BASE O_KEY instructions_base . C_KEY

    C_KEY           shift and go to state 89


state 80

    (43) instructions_base -> instruction_base . instructions_base
    (44) instructions_base -> instruction_base .
    (43) instructions_base -> . instruction_base instructions_base
    (44) instructions_base -> . instruction_base
    (34) instruction_base -> . LEFT INT
    (35) instruction_base -> . LEFT FLOAT
    (36) instruction_base -> . RIGHT INT
    (37) instruction_base -> . RIGHT FLOAT
    (38) instruction_base -> . LINE INT
    (39) instruction_base -> . JUMP INT COMMA INT
    (40) instruction_base -> . NILL
    (41) instruction_base -> . PUSH INT COMMA INT
    (42) instruction_base -> . POP

    C_KEY           reduce using rule 44 (instructions_base -> instruction_base .)
    LEFT            shift and go to state 72
    RIGHT           shift and go to state 73
    LINE            shift and go to state 74
    JUMP            shift and go to state 75
    NILL            shift and go to state 76
    PUSH            shift and go to state 77
    POP             shift and go to state 78

    instruction_base               shift and go to state 80
    instructions_base              shift and go to state 90

state 81

    (46) loops -> ITER INT . C_KEY

    C_KEY           shift and go to state 91


state 82

    (34) instruction_base -> LEFT INT .

    LEFT            reduce using rule 34 (instruction_base -> LEFT INT .)
    RIGHT           reduce using rule 34 (instruction_base -> LEFT INT .)
    LINE            reduce using rule 34 (instruction_base -> LEFT INT .)
    JUMP            reduce using rule 34 (instruction_base -> LEFT INT .)
    NILL            reduce using rule 34 (instruction_base -> LEFT INT .)
    PUSH            reduce using rule 34 (instruction_base -> LEFT INT .)
    POP             reduce using rule 34 (instruction_base -> LEFT INT .)
    CALL_RULE       reduce using rule 34 (instruction_base -> LEFT INT .)
    CALL_SHAPE      reduce using rule 34 (instruction_base -> LEFT INT .)
    C_KEY           reduce using rule 34 (instruction_base -> LEFT INT .)


state 83

    (35) instruction_base -> LEFT FLOAT .

    LEFT            reduce using rule 35 (instruction_base -> LEFT FLOAT .)
    RIGHT           reduce using rule 35 (instruction_base -> LEFT FLOAT .)
    LINE            reduce using rule 35 (instruction_base -> LEFT FLOAT .)
    JUMP            reduce using rule 35 (instruction_base -> LEFT FLOAT .)
    NILL            reduce using rule 35 (instruction_base -> LEFT FLOAT .)
    PUSH            reduce using rule 35 (instruction_base -> LEFT FLOAT .)
    POP             reduce using rule 35 (instruction_base -> LEFT FLOAT .)
    CALL_RULE       reduce using rule 35 (instruction_base -> LEFT FLOAT .)
    CALL_SHAPE      reduce using rule 35 (instruction_base -> LEFT FLOAT .)
    C_KEY           reduce using rule 35 (instruction_base -> LEFT FLOAT .)


state 84

    (36) instruction_base -> RIGHT INT .

    LEFT            reduce using rule 36 (instruction_base -> RIGHT INT .)
    RIGHT           reduce using rule 36 (instruction_base -> RIGHT INT .)
    LINE            reduce using rule 36 (instruction_base -> RIGHT INT .)
    JUMP            reduce using rule 36 (instruction_base -> RIGHT INT .)
    NILL            reduce using rule 36 (instruction_base -> RIGHT INT .)
    PUSH            reduce using rule 36 (instruction_base -> RIGHT INT .)
    POP             reduce using rule 36 (instruction_base -> RIGHT INT .)
    CALL_RULE       reduce using rule 36 (instruction_base -> RIGHT INT .)
    CALL_SHAPE      reduce using rule 36 (instruction_base -> RIGHT INT .)
    C_KEY           reduce using rule 36 (instruction_base -> RIGHT INT .)


state 85

    (37) instruction_base -> RIGHT FLOAT .

    LEFT            reduce using rule 37 (instruction_base -> RIGHT FLOAT .)
    RIGHT           reduce using rule 37 (instruction_base -> RIGHT FLOAT .)
    LINE            reduce using rule 37 (instruction_base -> RIGHT FLOAT .)
    JUMP            reduce using rule 37 (instruction_base -> RIGHT FLOAT .)
    NILL            reduce using rule 37 (instruction_base -> RIGHT FLOAT .)
    PUSH            reduce using rule 37 (instruction_base -> RIGHT FLOAT .)
    POP             reduce using rule 37 (instruction_base -> RIGHT FLOAT .)
    CALL_RULE       reduce using rule 37 (instruction_base -> RIGHT FLOAT .)
    CALL_SHAPE      reduce using rule 37 (instruction_base -> RIGHT FLOAT .)
    C_KEY           reduce using rule 37 (instruction_base -> RIGHT FLOAT .)


state 86

    (38) instruction_base -> LINE INT .

    LEFT            reduce using rule 38 (instruction_base -> LINE INT .)
    RIGHT           reduce using rule 38 (instruction_base -> LINE INT .)
    LINE            reduce using rule 38 (instruction_base -> LINE INT .)
    JUMP            reduce using rule 38 (instruction_base -> LINE INT .)
    NILL            reduce using rule 38 (instruction_base -> LINE INT .)
    PUSH            reduce using rule 38 (instruction_base -> LINE INT .)
    POP             reduce using rule 38 (instruction_base -> LINE INT .)
    CALL_RULE       reduce using rule 38 (instruction_base -> LINE INT .)
    CALL_SHAPE      reduce using rule 38 (instruction_base -> LINE INT .)
    C_KEY           reduce using rule 38 (instruction_base -> LINE INT .)


state 87

    (39) instruction_base -> JUMP INT . COMMA INT

    COMMA           shift and go to state 92


state 88

    (41) instruction_base -> PUSH INT . COMMA INT

    COMMA           shift and go to state 93


state 89

    (20) base -> BASE O_KEY instructions_base C_KEY .

    LEFT            reduce using rule 20 (base -> BASE O_KEY instructions_base C_KEY .)
    RIGHT           reduce using rule 20 (base -> BASE O_KEY instructions_base C_KEY .)
    LINE            reduce using rule 20 (base -> BASE O_KEY instructions_base C_KEY .)
    JUMP            reduce using rule 20 (base -> BASE O_KEY instructions_base C_KEY .)
    NILL            reduce using rule 20 (base -> BASE O_KEY instructions_base C_KEY .)
    PUSH            reduce using rule 20 (base -> BASE O_KEY instructions_base C_KEY .)
    POP             reduce using rule 20 (base -> BASE O_KEY instructions_base C_KEY .)
    CALL_RULE       reduce using rule 20 (base -> BASE O_KEY instructions_base C_KEY .)
    CALL_SHAPE      reduce using rule 20 (base -> BASE O_KEY instructions_base C_KEY .)


state 90

    (43) instructions_base -> instruction_base instructions_base .

    C_KEY           reduce using rule 43 (instructions_base -> instruction_base instructions_base .)


state 91

    (46) loops -> ITER INT C_KEY .

    RULE            reduce using rule 46 (loops -> ITER INT C_KEY .)
    DEPTH           reduce using rule 46 (loops -> ITER INT C_KEY .)


state 92

    (39) instruction_base -> JUMP INT COMMA . INT

    INT             shift and go to state 94


state 93

    (41) instruction_base -> PUSH INT COMMA . INT

    INT             shift and go to state 95


state 94

    (39) instruction_base -> JUMP INT COMMA INT .

    LEFT            reduce using rule 39 (instruction_base -> JUMP INT COMMA INT .)
    RIGHT           reduce using rule 39 (instruction_base -> JUMP INT COMMA INT .)
    LINE            reduce using rule 39 (instruction_base -> JUMP INT COMMA INT .)
    JUMP            reduce using rule 39 (instruction_base -> JUMP INT COMMA INT .)
    NILL            reduce using rule 39 (instruction_base -> JUMP INT COMMA INT .)
    PUSH            reduce using rule 39 (instruction_base -> JUMP INT COMMA INT .)
    POP             reduce using rule 39 (instruction_base -> JUMP INT COMMA INT .)
    CALL_RULE       reduce using rule 39 (instruction_base -> JUMP INT COMMA INT .)
    CALL_SHAPE      reduce using rule 39 (instruction_base -> JUMP INT COMMA INT .)
    C_KEY           reduce using rule 39 (instruction_base -> JUMP INT COMMA INT .)


state 95

    (41) instruction_base -> PUSH INT COMMA INT .

    LEFT            reduce using rule 41 (instruction_base -> PUSH INT COMMA INT .)
    RIGHT           reduce using rule 41 (instruction_base -> PUSH INT COMMA INT .)
    LINE            reduce using rule 41 (instruction_base -> PUSH INT COMMA INT .)
    JUMP            reduce using rule 41 (instruction_base -> PUSH INT COMMA INT .)
    NILL            reduce using rule 41 (instruction_base -> PUSH INT COMMA INT .)
    PUSH            reduce using rule 41 (instruction_base -> PUSH INT COMMA INT .)
    POP             reduce using rule 41 (instruction_base -> PUSH INT COMMA INT .)
    CALL_RULE       reduce using rule 41 (instruction_base -> PUSH INT COMMA INT .)
    CALL_SHAPE      reduce using rule 41 (instruction_base -> PUSH INT COMMA INT .)
    C_KEY           reduce using rule 41 (instruction_base -> PUSH INT COMMA INT .)

